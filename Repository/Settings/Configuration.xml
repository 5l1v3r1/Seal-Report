<?xml version="1.0" encoding="utf-8"?><SealServerConfiguration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><DefaultConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</DefaultConnectionString><TaskFolderName>Seal Report</TaskFolderName><WebProductName>Seal Report</WebProductName><FileReplacePatterns><FileReplacePattern><FileName>bootstrap.min.css</FileName><OldValue>url(../fonts/glyphicons-halflings-regular</OldValue><NewValue>url(https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/fonts/glyphicons-halflings-regular</NewValue></FileReplacePattern></FileReplacePatterns><CssFiles>_ed.buttons.bootstrap.min.css&#xD;
_ed.select.bootstrap.min.css&#xD;
_ed.editor.bootstrap.min.css</CssFiles><ScriptFiles>_ed.dataTables.buttons.min.js&#xD;
_ed.buttons.bootstrap.min.js&#xD;
_ed.dataTables.select.min.js&#xD;
_ed.dataTables.editor.min.js&#xD;
_ed.editor.bootstrap.min.js&#xD;
_ed.common.js</ScriptFiles><AuditScript>@using Seal.Model&#xD;
@using Seal.Helpers&#xD;
@using System.Data&#xD;
@using System.Data.Common&#xD;
&#xD;
@{&#xD;
    Audit audit = Model;&#xD;
&#xD;
    var auditSource = Repository.Instance.Sources.FirstOrDefault(i =&gt; i.Name == "Audit");&#xD;
    if (auditSource != null) {&#xD;
        var helper = new TaskDatabaseHelper();&#xD;
        var command = helper.GetDbCommand(auditSource.Connection.GetOpenConnection());&#xD;
&#xD;
        //Create audit table if necessary&#xD;
        checkTableCreation(command);&#xD;
        command.CommandText = @"insert into sr_audit(event_date,event_type,user_name,user_groups,report_name,report_path,execution_context,execution_view,execution_duration,execution_error,output_type,output_name,output_information,output_error,schedule_name)&#xD;
                                values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";&#xD;
        &#xD;
        addParameter(command, DbType.DateTime, DateTime.Now); //event_date,&#xD;
        addParameter(command, DbType.AnsiString, audit.Type.ToString()); //event_type,&#xD;
        addParameter(command, DbType.AnsiString, audit.User != null ? audit.User.Name : (object) DBNull.Value); //user_name,&#xD;
        addParameter(command, DbType.AnsiString, audit.User != null ? audit.User.SecurityGroupsDisplay : (object) DBNull.Value); //user_groups,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null ? audit.Report.ExecutionName : (object) DBNull.Value); //report_name,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null ? audit.Report.FilePath : (object) DBNull.Value); //report_path,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null ? audit.Report.ExecutionContext.ToString() : (object) DBNull.Value); //execution_context,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null ? audit.Report.ExecutionView.Name : (object) DBNull.Value); //execution_view,&#xD;
        addParameter(command, DbType.Int32, audit.Report != null ? Convert.ToInt32(audit.Report.ExecutionFullDuration.TotalSeconds) : (object) DBNull.Value); //execution_duration,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null ? audit.Report.ExecutionErrors : (object) DBNull.Value); //execution_error,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null &amp;&amp; audit.Report.OutputToExecute != null ? audit.Report.OutputToExecute.DeviceName : (object) DBNull.Value); //output_type,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null &amp;&amp; audit.Report.OutputToExecute != null ? audit.Report.OutputToExecute.Name : (object) DBNull.Value);//output_name,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null &amp;&amp; audit.Report.OutputToExecute != null &amp;&amp; audit.Report.OutputToExecute.Information != null ? audit.Report.OutputToExecute.Information : (object) DBNull.Value);//output_information,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null &amp;&amp; audit.Report.OutputToExecute != null &amp;&amp; audit.Report.OutputToExecute.Error != null ? audit.Report.OutputToExecute.Error : (object) DBNull.Value);//output_error,&#xD;
        addParameter(command, DbType.AnsiString, audit.Report != null &amp;&amp; audit.Schedule != null ? audit.Schedule.Name : (object) DBNull.Value);//schedule_name&#xD;
        command.ExecuteNonQuery();                &#xD;
    }&#xD;
&#xD;
}&#xD;
&#xD;
@functions {&#xD;
    void checkTableCreation(DbCommand command)&#xD;
    {&#xD;
        if (Audit.CheckTableCreation)&#xD;
        {&#xD;
            //Check table creation&#xD;
            Audit.CheckTableCreation = false;&#xD;
            try&#xD;
            {&#xD;
                command.CommandText = "select 1 from sr_audit where 1=0";&#xD;
                command.ExecuteNonQuery();&#xD;
            }&#xD;
            catch&#xD;
            {&#xD;
                //Create the table (to be adapted for your database type, e.g. ident identity(1,1), execution_error varchar(max) for SQLServer)&#xD;
                command.CommandText = @"create table sr_audit (&#xD;
                        event_date datetime,event_type varchar(20),event_detail varchar(250),user_name varchar(250),user_groups varchar(250),report_name varchar(250),report_path varchar(250),execution_context varchar(250),execution_view varchar(250),execution_status varchar(50),execution_duration int null,execution_locale varchar(50),execution_error varchar(250),output_type varchar(50),output_name varchar(250),output_information varchar(250),output_error varchar(250),schedule_name varchar(250)&#xD;
                    )";&#xD;
                command.ExecuteNonQuery();&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
&#xD;
    void addParameter(DbCommand command, DbType type, Object value)&#xD;
    {&#xD;
        var parameter = command.CreateParameter();&#xD;
        parameter.DbType = type;&#xD;
        parameter.Value = value;&#xD;
        if (value is string &amp;&amp; ((string)value).Length &gt;= 250) value = ((string)value).Substring(0, 249);&#xD;
        command.Parameters.Add(parameter);&#xD;
    }&#xD;
}&#xD;
</AuditScript><InitScript /><ReportCreationScript /><CommonScripts><CommonScript><Name>SetNegativeValuesInRed</Name><Script>@using System.Text&#xD;
@using Seal.Model&#xD;
@functions {&#xD;
    //Before execution, this script will be added at the end of all scripts executed...&#xD;
    public void SetNegativeValuesInRed(Report report) {&#xD;
        report.LogMessage("SetNegativeValuesInRed");&#xD;
        foreach (var model in report.Models) &#xD;
        {&#xD;
            foreach (var page in model.Pages) &#xD;
            {&#xD;
                foreach (var line in page.DataTable.Lines) &#xD;
                {&#xD;
                    foreach (var cell in line) &#xD;
                    {&#xD;
                        if (cell.Element != null &amp;&amp; cell.Element.IsNumeric &amp;&amp; cell.DoubleValue &lt; 0) {&#xD;
                            cell.FinalCssStyle = "font-weight:bold;color:red;";&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
}&#xD;
</Script></CommonScript></CommonScripts><DefaultCulture /><CsvSeparator /><WebApplicationPoolName>Seal Application Pool</WebApplicationPoolName><WebApplicationName>/seal</WebApplicationName><WebPublicationDirectory>C:\inetpub\wwwroot\Seal Report</WebPublicationDirectory><InstallationDirectory /></SealServerConfiguration>